{"version":3,"file":"startup.min.js","sources":["../src/startup.js"],"sourcesContent":["import {exception as displayException} from \"core/notification\";\nimport Templates from \"core/templates\";\n\nconst context = {\n  login: \"\",\n  autograded: true,\n};\n\nconst Selectors = {\n  elements: {\n    tempPlaceholder: '[data-element=\"mod_jupyter/placeholder\"]',\n  },\n};\n\nexport const init = ({login, autograded}) => {\n  // This will call the function to load and render our template.\n  context.login = login;\n  context.autograded = autograded == 1;\n  Templates.renderForPromise(\"mod_jupyter/manage\", context)\n    // It returns a promise that needs to be resoved.\n    .then(({html, js}) => {\n      // Here eventually I have my compiled template, and any javascript that it generated.\n      // The templates object has append, prepend and replace functions.\n      Templates.replaceNodeContents(\n        Selectors.elements.tempPlaceholder,\n        html,\n        js\n      );\n      return undefined;\n    })\n    // Deal with this exception (Using core/notify exception function is recommended).\n    .catch((error) => displayException(error));\n};\n"],"names":["context","login","autograded","Selectors","tempPlaceholder","_ref","renderForPromise","then","_ref2","html","js","replaceNodeContents","catch","error"],"mappings":"oRAGMA,QAAU,CACdC,MAAO,GACPC,YAAY,GAGRC,mBACM,CACRC,gBAAiB,0DAIDC,WAACJ,MAACA,MAADC,WAAQA,iBAE3BF,QAAQC,MAAQA,MAChBD,QAAQE,WAA2B,GAAdA,8BACXI,iBAAiB,qBAAsBN,SAE9CO,MAAKC,YAACC,KAACA,KAADC,GAAOA,6BAGFC,oBACRR,mBAAmBC,gBACnBK,KACAC,OAKHE,OAAOC,QAAU,2BAAiBA"}