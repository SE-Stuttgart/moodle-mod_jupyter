{"version":3,"file":"submit_notebook.min.js","sources":["../src/submit_notebook.js"],"sourcesContent":["import {submitNotebook} from \"./repository\";\nimport {exception as displayException} from \"core/notification\";\nimport Templates from \"core/templates\";\n\nconst context = {\n  message: \"error message jajadajajajajajajajaaj\",\n  closebutton: 0,\n  announce: 1,\n  points: [],\n  error: false,\n  errortype: \"\",\n  gradelink: \"\"\n};\n\nconst Selectors = {\n  elements: {\n    submitResponseBody: '[data-element=\"mod_jupyter/body-placeholder\"]',\n  },\n  actions: {\n    submitButton: '[data-action=\"mod_jupyter/submit-notebook_button\"]',\n    resetModal: '[data-action=\"mod_jupyter/reset-modal_button\"]',\n  },\n};\n\n\n/**\n * Add event listeners to Selectors.\n * @param {*} param0\n */\nexport const init = async({user, courseid, instanceid, filename, token, gradelink}) => {\n  document.addEventListener(\"click\", (e) => {\n    if (e.target.closest(Selectors.actions.submitButton)) {\n      resetModalBody();\n      callSubmitNotebook(user, courseid, instanceid, filename, token, gradelink);\n    }\n  });\n\n  document.addEventListener(\"click\", (e) => {\n    if (e.target.closest(Selectors.actions.resetModal)) {\n      resetModalBody();\n    }\n  });\n};\n\n\n/**\n * Call external service from repository to submit notebook to grading service and display graded response.\n *\n * @param {string} user\n * @param {int} courseid\n * @param {int} instanceid\n * @param {string} filename\n * @param {string} token\n * @param {string} gradelink\n */\nconst callSubmitNotebook = async(\n  user,\n  courseid,\n  instanceid,\n  filename,\n  token,\n  gradelink\n) => {\n  const response = await submitNotebook(\n    user,\n    courseid,\n    instanceid,\n    filename,\n    token\n  );\n\n  window.console.log(response);\n  if (response[0].error) {\n    context.error = response[0].error;\n    context.message = response[0].errormessage;\n    renderErrorNotification();\n  } else {\n    context.error = false;\n    context.points = response;\n    context.gradelink = gradelink;\n    renderModalTable();\n  }\n\n\n};\n\n/**\n * Render table inside the submit modal to show submit response.\n */\nconst renderErrorNotification = (\n) => {\n  Templates.renderForPromise('core/notification_error', context)\n    // It returns a promise that needs to be resoved.\n    .then(({html, js}) => {\n      // Here eventually I have my compiled template, and any javascript that it generated.\n      // The templates object has append, prepend and replace functions.\n      Templates.replaceNodeContents(\n        Selectors.elements.submitResponseBody,\n        html,\n        js\n      );\n      return undefined;\n    })\n    // Deal with this exception (Using core/notify exception function is recommended).\n    .catch((error) => displayException(error));\n};\n\n/**\n * Render table inside the submit modal to show submit response.\n */\nconst renderModalTable = (\n) => {\n  Templates.renderForPromise(\"mod_jupyter/submit_response_modal_table\", context)\n    // It returns a promise that needs to be resoved.\n    .then(({html, js}) => {\n      // Here eventually I have my compiled template, and any javascript that it generated.\n      // The templates object has append, prepend and replace functions.\n      Templates.replaceNodeContents(\n        Selectors.elements.submitResponseBody,\n        html,\n        js\n      );\n      return undefined;\n    })\n    // Deal with this exception (Using core/notify exception function is recommended).\n    .catch((error) => displayException(error));\n};\n\n/**\n * Replace table with loading template for reset.\n */\nconst resetModalBody = async(\n) => {\n  Templates.renderForPromise(\"mod_jupyter/loading\", context)\n    // It returns a promise that needs to be resoved.\n    .then(({html, js}) => {\n      // Here eventually I have my compiled template, and any javascript that it generated.\n      // The templates object has append, prepend and replace functions.\n      Templates.replaceNodeContents(\n        Selectors.elements.submitResponseBody,\n        html,\n        js\n      );\n      return undefined;\n    })\n    // Deal with this exception (Using core/notify exception function is recommended).\n    .catch((error) => displayException(error));\n};\n"],"names":["context","message","closebutton","announce","points","error","errortype","gradelink","Selectors","submitResponseBody","submitButton","resetModal","async","user","courseid","instanceid","filename","token","document","addEventListener","e","target","closest","resetModalBody","callSubmitNotebook","response","window","console","log","errormessage","renderErrorNotification","renderModalTable","renderForPromise","then","_ref2","html","js","replaceNodeContents","catch","_ref3","_ref4"],"mappings":"uTAIMA,QAAU,CACdC,QAAS,uCACTC,YAAa,EACbC,SAAU,EACVC,OAAQ,GACRC,OAAO,EACPC,UAAW,GACXC,UAAW,IAGPC,mBACM,CACRC,mBAAoB,iDAFlBD,kBAIK,CACPE,aAAc,qDACdC,WAAY,gEASIC,MAAAA,WAAMC,KAACA,KAADC,SAAOA,SAAPC,WAAiBA,WAAjBC,SAA6BA,SAA7BC,MAAuCA,MAAvCV,UAA8CA,gBACtEW,SAASC,iBAAiB,SAAUC,IAC9BA,EAAEC,OAAOC,QAAQd,kBAAkBE,gBACrCa,iBACAC,mBAAmBX,KAAMC,SAAUC,WAAYC,SAAUC,MAAOV,eAIpEW,SAASC,iBAAiB,SAAUC,IAC9BA,EAAEC,OAAOC,QAAQd,kBAAkBG,aACrCY,2BAgBAC,mBAAqBZ,MACzBC,KACAC,SACAC,WACAC,SACAC,MACAV,mBAEMkB,eAAiB,8BACrBZ,KACAC,SACAC,WACAC,SACAC,OAGFS,OAAOC,QAAQC,IAAIH,UACfA,SAAS,GAAGpB,OACdL,QAAQK,MAAQoB,SAAS,GAAGpB,MAC5BL,QAAQC,QAAUwB,SAAS,GAAGI,aAC9BC,4BAEA9B,QAAQK,OAAQ,EAChBL,QAAQI,OAASqB,SACjBzB,QAAQO,UAAYA,UACpBwB,qBASED,wBAA0B,wBAEpBE,iBAAiB,0BAA2BhC,SAEnDiC,MAAKC,YAACC,KAACA,KAADC,GAAOA,6BAGFC,oBACR7B,mBAAmBC,mBACnB0B,KACAC,OAKHE,OAAOjC,QAAU,2BAAiBA,UAMjC0B,iBAAmB,wBAEbC,iBAAiB,0CAA2ChC,SAEnEiC,MAAKM,YAACJ,KAACA,KAADC,GAAOA,6BAGFC,oBACR7B,mBAAmBC,mBACnB0B,KACAC,OAKHE,OAAOjC,QAAU,2BAAiBA,UAMjCkB,eAAiBX,6BAEXoB,iBAAiB,sBAAuBhC,SAE/CiC,MAAKO,YAACL,KAACA,KAADC,GAAOA,6BAGFC,oBACR7B,mBAAmBC,mBACnB0B,KACAC,OAKHE,OAAOjC,QAAU,2BAAiBA"}